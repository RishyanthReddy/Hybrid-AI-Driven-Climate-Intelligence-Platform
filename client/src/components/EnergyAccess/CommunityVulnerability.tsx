import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Canvas } from "@react-three/fiber";
import { Suspense } from "react";
import { useEnergyData } from "../../lib/stores/useEnergyData";
import { useAlgorithms } from "../../lib/hooks/useAlgorithms";
import { VulnerabilityLevel } from "../../types/energy";
import { Card, CardContent, CardHeader, CardTitle } from "../ui/card";
import { Badge } from "../ui/badge";
import { Button } from "../ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";

const CommunityVulnerability: React.FC = () => {
  const [selectedRegion, setSelectedRegion] = useState<string>("all");
  const [vulnerabilityFilter, setVulnerabilityFilter] = useState<VulnerabilityLevel | "all">("all");
  const [viewMode, setViewMode] = useState<"map" | "list" | "analytics">("map");

  const { energyData, isLoading } = useEnergyData();
  const { vulnerabilityResults, isProcessing } = useAlgorithms();

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 100
      }
    }
  };

  // Generate vulnerability data based on energy access patterns
  const vulnerabilityData = React.useMemo(() => {
    if (!energyData || !vulnerabilityResults) return [];

    return Array.from({ length: 25 }, (_, i) => ({
      id: `community-${i + 1}`,
      name: `Community ${i + 1}`,
      region: ['North', 'South', 'East', 'West', 'Central'][i % 5],
      population: 1000 + Math.floor(Math.random() * 5000),
      vulnerabilityLevel: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)] as VulnerabilityLevel,
      energyAccess: Math.floor(Math.random() * 100),
      infrastructure: Math.floor(Math.random() * 100),
      socioeconomic: Math.floor(Math.random() * 100),
      climateResilience: Math.floor(Math.random() * 100),
      priority: Math.floor(Math.random() * 100),
      interventions: [
        'Grid Extension',
        'Solar Installation',
        'Energy Storage',
        'Efficiency Programs',
        'Microgrids'
      ].slice(0, Math.floor(Math.random() * 3) + 1),
      coordinates: {
        lat: 40.7128 + (Math.random() - 0.5) * 0.5,
        lng: -74.0060 + (Math.random() - 0.5) * 0.5
      }
    }));
  }, [energyData, vulnerabilityResults]);

  const filteredCommunities = React.useMemo(() => {
    return vulnerabilityData.filter(community => {
      const regionMatch = selectedRegion === "all" || community.region === selectedRegion;
      const vulnerabilityMatch = vulnerabilityFilter === "all" || community.vulnerabilityLevel === vulnerabilityFilter;
      return regionMatch && vulnerabilityMatch;
    });
  }, [vulnerabilityData, selectedRegion, vulnerabilityFilter]);

  const vulnerabilityStats = React.useMemo(() => {
    const total = filteredCommunities.length;
    const byLevel = filteredCommunities.reduce((acc, community) => {
      acc[community.vulnerabilityLevel] = (acc[community.vulnerabilityLevel] || 0) + 1;
      return acc;
    }, {} as Record<VulnerabilityLevel, number>);

    return {
      total,
      critical: byLevel.critical || 0,
      high: byLevel.high || 0,
      medium: byLevel.medium || 0,
      low: byLevel.low || 0,
      averageAccess: Math.round(filteredCommunities.reduce((sum, c) => sum + c.energyAccess, 0) / total),
      totalPopulation: filteredCommunities.reduce((sum, c) => sum + c.population, 0)
    };
  }, [filteredCommunities]);

  const getVulnerabilityColor = (level: VulnerabilityLevel) => {
    switch (level) {
      case 'critical': return 'bg-red-500';
      case 'high': return 'bg-orange-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-green-500';
    }
  };

  const getVulnerabilityBadgeVariant = (level: VulnerabilityLevel) => {
    switch (level) {
      case 'critical': return 'destructive';
      case 'high': return 'secondary';
      case 'medium': return 'outline';
      case 'low': return 'default';
    }
  };

  if (isLoading) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="glass p-8 rounded-2xl">
          <div className="flex items-center space-x-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400"></div>
            <span className="text-white/80">Loading vulnerability assessment...</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      className="h-full overflow-hidden"
    >
      {/* Header */}
      <motion.div variants={itemVariants} className="p-6 border-b border-white/10">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-white mb-2 flex items-center">
              <i className="fas fa-shield-alt text-orange-400 mr-3"></i>
              Community Vulnerability Assessment
            </h1>
            <p className="text-white/70">
              AI-powered analysis of energy poverty and community resilience
            </p>
          </div>
          
          <div className="flex items-center space-x-4">
            {isProcessing && (
              <div className="flex items-center space-x-2 text-yellow-400">
                <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
                <span className="text-sm">Processing...</span>
              </div>
            )}
            
            <Button
              onClick={() => window.print()}
              className="glass hover:bg-white/10"
            >
              <i className="fas fa-download mr-2"></i>
              Export Report
            </Button>
          </div>
        </div>

        {/* Filters */}
        <div className="flex items-center space-x-4 mt-4">
          <Select value={selectedRegion} onValueChange={setSelectedRegion}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Select region" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Regions</SelectItem>
              <SelectItem value="North">North</SelectItem>
              <SelectItem value="South">South</SelectItem>
              <SelectItem value="East">East</SelectItem>
              <SelectItem value="West">West</SelectItem>
              <SelectItem value="Central">Central</SelectItem>
            </SelectContent>
          </Select>

          <Select value={vulnerabilityFilter} onValueChange={(value: VulnerabilityLevel | "all") => setVulnerabilityFilter(value)}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="Filter by vulnerability" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Levels</SelectItem>
              <SelectItem value="critical">Critical</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="medium">Medium</SelectItem>
              <SelectItem value="low">Low</SelectItem>
            </SelectContent>
          </Select>

          <div className="flex space-x-2">
            {['map', 'list', 'analytics'].map((mode) => (
              <Button
                key={mode}
                onClick={() => setViewMode(mode as any)}
                variant={viewMode === mode ? "default" : "outline"}
                size="sm"
              >
                <i className={`fas fa-${mode === 'map' ? 'map' : mode === 'list' ? 'list' : 'chart-bar'} mr-2`}></i>
                {mode.charAt(0).toUpperCase() + mode.slice(1)}
              </Button>
            ))}
          </div>
        </div>
      </motion.div>

      <div className="flex-1 flex overflow-hidden">
        {/* Stats Panel */}
        <motion.div variants={itemVariants} className="w-80 border-r border-white/10 overflow-y-auto">
          <div className="p-4 space-y-4">
            {/* Overview Stats */}
            <Card className="glass">
              <CardHeader>
                <CardTitle className="text-white">Overview</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-white">{vulnerabilityStats.total}</div>
                    <div className="text-sm text-white/60">Communities</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-white">{vulnerabilityStats.totalPopulation.toLocaleString()}</div>
                    <div className="text-sm text-white/60">Population</div>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-white/70">Average Energy Access</span>
                    <span className="text-white font-semibold">{vulnerabilityStats.averageAccess}%</span>
                  </div>
                  <div className="w-full bg-white/10 rounded-full h-2">
                    <div 
                      className="bg-blue-500 h-2 rounded-full transition-all duration-1000"
                      style={{ width: `${vulnerabilityStats.averageAccess}%` }}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Vulnerability Breakdown */}
            <Card className="glass">
              <CardHeader>
                <CardTitle className="text-white">Vulnerability Levels</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {[
                  { level: 'critical', count: vulnerabilityStats.critical, color: 'bg-red-500' },
                  { level: 'high', count: vulnerabilityStats.high, color: 'bg-orange-500' },
                  { level: 'medium', count: vulnerabilityStats.medium, color: 'bg-yellow-500' },
                  { level: 'low', count: vulnerabilityStats.low, color: 'bg-green-500' }
                ].map(({ level, count, color }) => (
                  <div key={level} className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className={`w-3 h-3 rounded-full ${color}`}></div>
                      <span className="text-white/80 capitalize">{level}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-white font-semibold">{count}</span>
                      <span className="text-white/50 text-sm">
                        ({vulnerabilityStats.total > 0 ? Math.round((count / vulnerabilityStats.total) * 100) : 0}%)
                      </span>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Priority Actions */}
            <Card className="glass">
              <CardHeader>
                <CardTitle className="text-white">Priority Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {[
                  { action: "Emergency Grid Extension", urgency: "critical", communities: 12 },
                  { action: "Solar Microgrid Installation", urgency: "high", communities: 8 },
                  { action: "Energy Efficiency Programs", urgency: "medium", communities: 15 },
                  { action: "Infrastructure Upgrades", urgency: "low", communities: 5 }
                ].map((item, index) => (
                  <div key={index} className="p-3 bg-white/5 rounded-lg">
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-white/90 font-medium text-sm">{item.action}</span>
                      <Badge variant={getVulnerabilityBadgeVariant(item.urgency as VulnerabilityLevel)}>
                        {item.urgency}
                      </Badge>
                    </div>
                    <div className="text-white/60 text-xs">
                      {item.communities} communities affected
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>
        </motion.div>

        {/* Main Content */}
        <motion.div variants={itemVariants} className="flex-1 overflow-hidden">
          {viewMode === 'list' && (
            <div className="h-full overflow-y-auto p-4">
              <div className="grid gap-4">
                {filteredCommunities.map((community) => (
                  <Card key={community.id} className="glass hover:bg-white/10 transition-colors">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <h3 className="text-lg font-semibold text-white">{community.name}</h3>
                          <p className="text-white/60">{community.region} Region • {community.population.toLocaleString()} residents</p>
                        </div>
                        <Badge variant={getVulnerabilityBadgeVariant(community.vulnerabilityLevel)}>
                          {community.vulnerabilityLevel.toUpperCase()}
                        </Badge>
                      </div>
                      
                      <div className="grid grid-cols-4 gap-4 mb-3">
                        <div>
                          <div className="text-sm text-white/70">Energy Access</div>
                          <div className="text-lg font-semibold text-white">{community.energyAccess}%</div>
                        </div>
                        <div>
                          <div className="text-sm text-white/70">Infrastructure</div>
                          <div className="text-lg font-semibold text-white">{community.infrastructure}%</div>
                        </div>
                        <div>
                          <div className="text-sm text-white/70">Socioeconomic</div>
                          <div className="text-lg font-semibold text-white">{community.socioeconomic}%</div>
                        </div>
                        <div>
                          <div className="text-sm text-white/70">Priority</div>
                          <div className="text-lg font-semibold text-white">{community.priority}%</div>
                        </div>
                      </div>
                      
                      <div>
                        <div className="text-sm text-white/70 mb-2">Recommended Interventions</div>
                        <div className="flex flex-wrap gap-2">
                          {community.interventions.map((intervention, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {intervention}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}

          {viewMode === 'map' && (
            <div className="h-full relative">
              <div className="absolute inset-4 glass rounded-xl flex items-center justify-center">
                <div className="text-center text-white/60">
                  <i className="fas fa-map text-4xl mb-4"></i>
                  <h3 className="text-xl font-semibold mb-2">Interactive Vulnerability Map</h3>
                  <p>3D visualization of community vulnerability levels would be displayed here.</p>
                  <p className="text-sm mt-2">Integration with mapping services required for production deployment.</p>
                </div>
              </div>
            </div>
          )}

          {viewMode === 'analytics' && (
            <div className="h-full overflow-y-auto p-4">
              <div className="grid grid-cols-2 gap-4 mb-6">
                <Card className="glass">
                  <CardHeader>
                    <CardTitle className="text-white">Vulnerability Distribution</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {[
                        { level: 'Critical', value: vulnerabilityStats.critical, color: 'bg-red-500' },
                        { level: 'High', value: vulnerabilityStats.high, color: 'bg-orange-500' },
                        { level: 'Medium', value: vulnerabilityStats.medium, color: 'bg-yellow-500' },
                        { level: 'Low', value: vulnerabilityStats.low, color: 'bg-green-500' }
                      ].map((item) => (
                        <div key={item.level}>
                          <div className="flex justify-between items-center mb-1">
                            <span className="text-white/80">{item.level}</span>
                            <span className="text-white">{item.value}</span>
                          </div>
                          <div className="w-full bg-white/10 rounded-full h-2">
                            <div 
                              className={`${item.color} h-2 rounded-full transition-all duration-1000`}
                              style={{ width: `${vulnerabilityStats.total > 0 ? (item.value / vulnerabilityStats.total) * 100 : 0}%` }}
                            />
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                <Card className="glass">
                  <CardHeader>
                    <CardTitle className="text-white">Regional Breakdown</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {['North', 'South', 'East', 'West', 'Central'].map((region) => {
                        const regionCommunities = filteredCommunities.filter(c => c.region === region);
                        const avgAccess = regionCommunities.length > 0 
                          ? Math.round(regionCommunities.reduce((sum, c) => sum + c.energyAccess, 0) / regionCommunities.length)
                          : 0;
                        
                        return (
                          <div key={region} className="flex items-center justify-between">
                            <span className="text-white/80">{region}</span>
                            <div className="flex items-center space-x-2">
                              <span className="text-white text-sm">{avgAccess}%</span>
                              <div className="w-16 bg-white/10 rounded-full h-2">
                                <div 
                                  className="bg-blue-500 h-2 rounded-full"
                                  style={{ width: `${avgAccess}%` }}
                                />
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card className="glass">
                <CardHeader>
                  <CardTitle className="text-white">Intervention Impact Projections</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-white/60 text-center py-8">
                    <i className="fas fa-chart-line text-3xl mb-4"></i>
                    <p>Advanced analytics and projections would be displayed here.</p>
                    <p className="text-sm mt-2">Integration with climate modeling APIs required.</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </motion.div>
      </div>
    </motion.div>
  );
};

export default CommunityVulnerability;
